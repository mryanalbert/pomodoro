{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleIncrement","inc","mode","state","setState","handleReset","breakValue","sessionValue","active","time","type","touched","clearInterval","countdown","audio","pause","currentTime","handlePlayPause","setInterval","bind","prevProps","prevState","this","play","className","value","moment","format","playing","id","src","ref","Component","SetTimer","onClick","class","Timer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01c0b2b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            time: 25 * 60 * 1000,\n            breakValue: 5,\n            sessionValue: 25,\n            active: false,\n            type: 'session',\n            touched: false\n        }\n\n        this.handleIncrement = this.handleIncrement.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handlePlayPause = this.handlePlayPause.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.time === 0 && prevState.type === 'session') {\n            this.setState({ time: prevState.breakValue * 60 * 1000, type: 'break' });\n            this.audio.play();\n        }\n        if (prevState.time === 0 && prevState.type === 'break') {\n            this.setState({ time: prevState.sessionValue * 60 * 1000, type: 'session' });\n            this.audio.play();\n        }\n    }\n\n    handleIncrement = (inc, mode) => {\n        /*if (mode === \"sessionValue\") {\n            this.setState({ time: (this.state[mode] + (inc ? 1 : -1)) * 60 * 1000 })\n        }*/\n        if (this.state[mode] === 60 && inc) return\n        if (this.state[mode] === 1 && !inc) return\n        this.setState({ [mode]: this.state[mode] + (inc ? 1 : -1)});\n    }\n\n    handleReset = () => {\n        this.setState({ breakValue: 5, sessionValue: 25, active: false, time: 25 * 60 * 1000, type: 'session', touched: false });\n        clearInterval(this.countdown);\n        this.audio.pause();\n        this.audio.currentTime = 0;\n    }\n\n    handlePlayPause = () => {\n        if (this.state.active) {\n            clearInterval(this.countdown);\n            this.audio.pause();\n            this.setState({ active: false });\n        } else {\n            if (this.state.touched) {\n                this.countdown = setInterval(() => this.setState({ time: this.state.time - 1000 }), 1000);\n                this.setState({ active: true });\n            } else {\n                this.setState({ time: this.state.sessionValue * 60 * 1000, touched: true, active: true });\n                this.countdown = setInterval(() => this.setState({ time: this.state.time - 1000 }), 1000);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"setTimer\">\n                    <SetTimer mode=\"break\" value={this.state.breakValue} handleIncrement={this.handleIncrement}/>\n                    <SetTimer mode=\"session\" value={this.state.sessionValue} handleIncrement={this.handleIncrement}/>\n                </div>\n                <Timer type={this.state.type} time={moment(this.state.time).format(\"mm:ss\")} handleReset={this.handleReset} playing={this.state.active} handlePlayPause={this.handlePlayPause}/>\n                <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" ref={ref => this.audio = ref}></audio>\n            </div>\n        );\n    }\n}\n\n\n\nconst SetTimer = ({ mode, value, handleIncrement }) => (\n    <div className=\"break_session-length\" id={`${mode}Length`}>\n        <h1 id={`${mode}-label`}>{mode === \"session\" ? \"Session\" : \"Break\"} Length</h1>\n        <div className=\"break-value\">\n            <button id={`${mode}-decrement`} onClick={() => handleIncrement(false, `${mode}Value`)}><i class=\"fas fa-minus\"></i></button>\n            <h1 id={`${mode}-length`} className=\"value\">{value}</h1>\n            <button id={`${mode}-increment`} onClick={() => handleIncrement(true, `${mode}Value`)}><i class=\"fas fa-plus\"></i></button>\n        </div>\n    </div>\n)\n\nconst Timer = ({ type, time, handleReset, playing, handlePlayPause }) => (\n    <div className=\"timer\">\n        <h1 id=\"timer-label\">{type === 'session' ? \"Session\" : \"Break\"}</h1>\n        <h1 id=\"time-left\">{time}</h1>\n        <div className=\"controls\">\n            <button id=\"start_stop\" onClick={handlePlayPause}>{playing ? <i class=\"fas fa-pause\"></i> :<i class=\"fas fa-play\"></i> }</button>\n            <button id=\"reset\" onClick={handleReset}><i class=\"fas fa-redo\"></i></button>\n        </div>\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}